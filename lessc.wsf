<!--
Less.js compiler for Windows Script Host
http://blog.dotsmart.net/

Copyright (c) 2010, Duncan Smart
Licensed under the Apache 2.0 License.
-->
<job>
<script language="jscript">
     // Stub out globals
    var window = this;
    var location = window.location = { 
        port: 0,
        href: ''
    };
    var fso = new ActiveXObject("Scripting.FileSystemObject");
    var input = null;

    var util = {
        readText: function (filename) {
            //WScript.StdErr.WriteLine("readText: " + filename);
            var file = fso.OpenTextFile(filename);
            // Don't error on empty files
            var text = file.AtEndOfStream ? '' : file.ReadAll();

            // Strip off any UTF-8 BOM
            var utf8bom = String.fromCharCode(0xEF, 0xBB, 0xBF);
            if (text.substr(0, utf8bom.length) == utf8bom) {
                text = text.substr(utf8bom.length);
            }
            file.Close();
            return text;
        }
    };
    
    // XMLHttpRequest that just gets local files. Used when processing "@import"
    function XMLHttpRequest(){}
    XMLHttpRequest.prototype = {
        open: function (method, url, async) {
            this.url = url;
        },
        send: function () {
            // get the file path relative to the input less file/directory
            var currDir = fso.folderExists(input) ? input : fso.getParentFolderName(input);
            var filename = fso.BuildPath(currDir, this.url);

            //WScript.StdErr.WriteLine("XHR.send " + filename);
            
            // Little hack so *.less will resolve to *.less.css also. Helps with Visual Studio 
            // ensuring that file BuildAction is set to Content and you get rudimentary syntax highlighting with no set up.
            if (filename.match(/.less$/i) && !fso.FileExists(filename)) {
                filename = filename.replace(/.less$/i, '.less.css');
            }
            
            try {
                this.status = 200;
                this.responseText = util.readText(filename);
            }
            catch (e) {
                this.status = 404;
                this.responseText = e.description;
            }
        },
        setRequestHeader:  function () {},
        getResponseHeader: function () {}
    };
    
    // Fake document
    var document = {
        _dummyElement: {
            childNodes: [], 
            appendChild: function(){
            },
            parentNode: {
                removeChild: function () {}
            },
            style: {}
        },
        getElementsByTagName: function(){ return []; },
        getElementById: function(){ return this._dummyElement; },
        createElement:  function(){ return this._dummyElement; },
        createTextNode: function(){ return this._dummyElement; }
    };        
        
</script>

<!-- less.js from https://github.com/cloudhead/less.js/tree/master/dist/ -->
<script language="jscript" src="less-1.3.0.js" />

<script language="jscript"> 
    // Parse args
    var args = {};
    for (var i = 0; i < WScript.Arguments.Length; i++) {
        var arg = WScript.Arguments.Item(i);
        // Handle "-switch" and "--switch"
        var match = arg.match(/^--?([a-z][0-9a-z-]*)$/i);
        if (match) {
            i = match[1];
            arg = true;
        }
        args[i] = arg;
    }

    input = args[0];
    var output = args[1];

    if (fso.folderExists(input)) {
        input = fso.getAbsolutePathName(input);
        var files = getFiles(input, /\.less$/i);
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            convert(file.path, output + '\\' + file.name.replace( /\.less$/i, '.css'));
        }
    }
    else {
        if (fso.folderexists(output)) {
            output = fso.getAbsolutePathName(output) + '\\' + fso.getfile(input).name.replace(/\.less$/i, '.css');
        }
        convert(input, output);
    }

    // Returns array of {name:'foo.bar', path:'c:\baz\foo.bar'} for given directory and pattern
    function getFiles(dir, regex) {
        var e = new Enumerator(fso.getFolder(dir).files);
        var files = []
        for (; !e.atEnd(); e.moveNext()) {
            if (regex.test(e.item().path)) {
                files.push({
                    name: e.item().name, 
                    path: e.item().path
                });
            }
        }
        return files;
    }

    function exitWithError(err) {

        var i;

        if (args['vs']) {
            WScript.StdErr.WriteLine(
                (err.filename || 'unknown file') + "(" + (err.line || 0) + "," + (err.column || 0) + "): error: " + (err.message || ' ').replace(/\n/g, '\t')
            );
        } else {
            for (i in err) {
                if (err[i]) {
                    WScript.StdErr.WriteLine("  " + i + ': ' + err[i]);
                }
            }
        }
        WScript.Quit(2);
    }

    function convert(input, output) {
        if (!input) {
            WScript.StdErr.WriteLine("lessc.wsf: no input files");
            WScript.StdErr.WriteLine("Usage:");
            WScript.StdErr.WriteLine("  Single file: cscript //nologo lessc.wsf input.less [output.css] [-compress]");
            WScript.StdErr.WriteLine("  Directory:   cscript //nologo lessc.wsf inputdir outputdir [-compress]");
            WScript.StdErr.WriteLine("");
            WScript.StdErr.WriteLine("Options:");
            WScript.StdErr.WriteLine("  --vs: Use Visual Studio compatible error messages");

            WScript.Quit(1);
        }

        var data;
        if (input == '-') {
            var chunks = [];
            while (!WScript.StdIn.AtEndOfStream)
            chunks.push(WScript.StdIn.ReadAll());
            data = chunks.join('');
        }
        else {
            data = util.readText(input);
        }

        var parser = new less.Parser({
            filename: input
        });

        try {
            parser.parse(data, function (err, tree) {

                if (err) {
                    exitWithError(err);
                }
                else {
                    var css = tree.toCSS({
                        compress: args.compress
                    });
                    if (output) {
                        if(fso.FileExists(output))
     			    {
					   var checkfile = fso.GetFile(output);
					   if(checkfile.Attributes & 1)
					   {
					       checkfile.Attributes = checkfile.Attributes ^ 1
					   }
				    }
                        var outputfile = fso.CreateTextFile(output);
                        outputfile.Write(css);
                        outputfile.Close();
                    }
                    else {
                        WScript.StdOut.Write(css);
                    }
                }
            });
        }
        catch (e) {
            WScript.StdErr.WriteLine("ERROR:");
            for (var i in e) {
                if (e[i]) {
                    WScript.StdErr.WriteLine("  " + i + ': ' + e[i]);
                }
            }
            WScript.Quit(3);
        }

        // Sometimes less will return errors inside the fake HTML element
        if (document._dummyElement.innerHTML && document._dummyElement.innerHTML.match(/Syntax Error|Couldn't load/i)) {
            var m, err, s = document._dummyElement.innerHTML;
            s = s.replace(/<[^>]+(\/?)>/g, function (m) { return m.indexOf('/') > 0 && m !== '</label>' ? "\n" : '' });
            m = s.match(/([\s\S]+)[\n\s]+in[\n\s]+(\S+\.less)[\n\s]+on[\n\s]+line[\n\s]+(\d+),.*column[\n\s]+(\d+):[\n\s]+([\s\S]*)$/);

            if (m) {
                err = {
                    message: m[1],
                    filename: m[2],
                    line: m[3],
                    column: m[4],
                    extract: m[5].split(/\n+/g)
                };
            } else {
                err = { message: s.replace(/\n+/g, '\n') };
            }

            exitWithError(err);
        }
    }
</script>
</job>
